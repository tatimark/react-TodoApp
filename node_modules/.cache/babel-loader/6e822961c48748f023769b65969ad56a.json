{"ast":null,"code":"var _jsxFileName = \"/Users/taniaromanjimenez/React/05-hook-app/src/components/05-LayoutEffect/Layout.js\";\nimport React from 'react';\nimport { useFetch } from '../../hooks/useFetch';\nimport { useCounter } from '../../hooks/useCounter';\nimport '../02-useEffect/effects.css';\nexport const Layout = () => {\n  const {\n    counter,\n    increment\n  } = useCounter(1);\n  const {\n    data\n  } = useFetch(`https://www.breakingbadapi.com/api/quotes/${counter}`);\n  const {\n    author,\n    quote\n  } = !!data && data[0]; // si viene la data, osea si es true entonces en la posición 0 sino esas dos variables tendran un undefind\n  // !null daría true con lo cual no habría data , si pones !!null sería false con lo cual si habría data por eso se pone !!data\n  // console.log(autor, quote);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, \" Layout Effects\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"blockquote\", {\n    className: \"blockquote text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 17\n    }\n  }, quote)), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    onClick: increment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, \"Siguiente quote...\"));\n};","map":{"version":3,"sources":["/Users/taniaromanjimenez/React/05-hook-app/src/components/05-LayoutEffect/Layout.js"],"names":["React","useFetch","useCounter","Layout","counter","increment","data","author","quote"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAO,6BAAP;AAEA,OAAO,MAAMC,MAAM,GAAG,MAAM;AAExB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAyBH,UAAU,CAAC,CAAD,CAAzC;AAEA,QAAM;AAAEI,IAAAA;AAAF,MAAWL,QAAQ,CAAE,6CAA6CG,OAAS,EAAxD,CAAzB;AACA,QAAM;AAAEG,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoB,CAAC,CAACF,IAAF,IAAUA,IAAI,CAAC,CAAD,CAAxC,CALwB,CAKqB;AAC7C;AACA;;AACA,sBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAIY;AAAY,IAAA,SAAS,EAAC,uBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAG,IAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBE,KAAtB,CADA,CAJZ,eASI;AACA,IAAA,SAAS,EAAC,iBADV;AAEA,IAAA,OAAO,EAAGH,SAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BATJ,CADA;AAmBH,CA3BM","sourcesContent":["import React from 'react'\nimport { useFetch } from '../../hooks/useFetch';\nimport { useCounter } from '../../hooks/useCounter';\nimport '../02-useEffect/effects.css';\n\nexport const Layout = () => {\n\n    const { counter, increment } = useCounter(1);\n\n    const { data } = useFetch(`https://www.breakingbadapi.com/api/quotes/${ counter }`);\n    const { author, quote } = !!data && data[0]; // si viene la data, osea si es true entonces en la posición 0 sino esas dos variables tendran un undefind\n    // !null daría true con lo cual no habría data , si pones !!null sería false con lo cual si habría data por eso se pone !!data\n    // console.log(autor, quote);\n    return ( \n    <div>\n        <h1> Layout Effects</h1> \n        <hr />\n\n                <blockquote className=\"blockquote text-right\">\n                <p className=\"mb-0\">{ quote }</p>\n             \n                </blockquote>\n     \n        <button \n        className=\"btn btn-primary\"\n        onClick={ increment }>\n            Siguiente quote...\n        </button>\n   \n\n    </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}