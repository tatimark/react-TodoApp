{"ast":null,"code":"var _jsxFileName = \"/Users/taniaromanjimenez/React/05-hook-app/src/components/03-examples/MultipleCustomHooks.js\";\nimport React from 'react';\nimport { useFetch } from '../../hooks/useFetch';\nimport { useCounter } from '../../hooks/useCounter';\nimport '../02-useEffect/effects.css';\nexport const MultipleCustomHooks = () => {\n  const {\n    counter,\n    increment\n  } = useCounter(1);\n  const {\n    loading,\n    data\n  } = useFetch(`https://www.breakingbadapi.com/api/quotes/${counter}`);\n  const {\n    autor,\n    quote\n  } = !!data && data[0]; // si viene la data, osea si es true entonces en la posición 0 sino esas dos variables tendran un undefind\n  // !null daría true con lo cual no habría data , si pones !!null sería false con lo cual si habría data por eso se pone !!data\n\n  console.log(autor, quote);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, \" BreakingBad Quotes\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }), loading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert alert-info text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(\"blockquote\", {\n    className: \"blockquote text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }, quote), /*#__PURE__*/React.createElement(\"footer\", {\n    className: \"blockquote-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  }, autor)), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, \"Siguiente quote...\"));\n};","map":{"version":3,"sources":["/Users/taniaromanjimenez/React/05-hook-app/src/components/03-examples/MultipleCustomHooks.js"],"names":["React","useFetch","useCounter","MultipleCustomHooks","counter","increment","loading","data","autor","quote","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAO,6BAAP;AAEA,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AAErC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAyBH,UAAU,CAAC,CAAD,CAAzC;AAEA,QAAM;AAAEI,IAAAA,OAAF;AAAYC,IAAAA;AAAZ,MAAqBN,QAAQ,CAAE,6CAA6CG,OAAS,EAAxD,CAAnC;AACA,QAAM;AAAEI,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAmB,CAAC,CAACF,IAAF,IAAUA,IAAI,CAAC,CAAD,CAAvC,CALqC,CAKO;AAC5C;;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBC,KAAnB;AACA,sBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAKQH,OAAO,gBAGH;AAAK,IAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHG,gBASH;AAAY,IAAA,SAAS,EAAC,uBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAG,IAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBG,KAAtB,CADA,eAEA;AAAQ,IAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwCD,KAAxC,CAFA,CAdZ,eAqBI;AAAQ,IAAA,SAAS,EAAC,iBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BArBJ,CADA;AA6BH,CArCM","sourcesContent":["import React from 'react'\nimport { useFetch } from '../../hooks/useFetch';\nimport { useCounter } from '../../hooks/useCounter';\nimport '../02-useEffect/effects.css';\n\nexport const MultipleCustomHooks = () => {\n\n    const { counter, increment } = useCounter(1);\n\n    const { loading , data } = useFetch(`https://www.breakingbadapi.com/api/quotes/${ counter }`);\n    const { autor, quote } = !!data && data[0]; // si viene la data, osea si es true entonces en la posición 0 sino esas dos variables tendran un undefind\n    // !null daría true con lo cual no habría data , si pones !!null sería false con lo cual si habría data por eso se pone !!data\n    console.log(autor, quote);\n    return ( \n    <div>\n        <h1> BreakingBad Quotes</h1> \n        <hr />\n\n        {\n            loading\n            ?\n            (\n                <div className=\"alert alert-info text-center\">\n                    Loading...\n                </div>\n            )\n            :\n            (\n                <blockquote className=\"blockquote text-right\">\n                <p className=\"mb-0\">{ quote }</p>\n                <footer className=\"blockquote-footer\">{ autor }</footer>\n                </blockquote>\n            )\n\n        }\n        <button className=\"btn btn-primary\">\n            Siguiente quote...\n        </button>\n   \n\n    </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}