{"ast":null,"code":"import { useState, useEffect, useRef } from 'react';\nexport const useFetch = url => {\n  const isMounted = useRef(true);\n  const [state, setState] = useState({\n    data: null,\n    loading: true,\n    error: null\n  });\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  useEffect(() => {\n    setState({\n      data: null,\n      loading: true,\n      error: null\n    });\n    fetch(url).then(resp => resp.json()).then(data => {\n      setTimeout(() => {\n        setState({\n          loading: false,\n          error: null,\n          data\n        });\n      }, 4000);\n    });\n  }, [url]);\n  return state;\n};","map":{"version":3,"sources":["/Users/taniaromanjimenez/React/05-hook-app/src/hooks/useFetch.js"],"names":["useState","useEffect","useRef","useFetch","url","isMounted","state","setState","data","loading","error","current","fetch","then","resp","json","setTimeout"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AAEA,OAAO,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAG7B,QAAMC,SAAS,GAAGH,MAAM,CAAC,IAAD,CAAxB;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC;AAAEQ,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,OAAO,EAAE,IAAvB;AAA6BC,IAAAA,KAAK,EAAE;AAApC,GAAD,CAAlC;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAO,MAAM;AACTI,MAAAA,SAAS,CAACM,OAAV,GAAoB,KAApB;AACH,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT;AAMAV,EAAAA,SAAS,CAAC,MAAM;AAEZM,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,OAAO,EAAE,IAAvB;AAA6BC,MAAAA,KAAK,EAAE;AAApC,KAAD,CAAR;AAEAE,IAAAA,KAAK,CAACR,GAAD,CAAL,CAAWS,IAAX,CAAgBC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAAxB,EAAqCF,IAArC,CAA0CL,IAAI,IAAI;AAE9CQ,MAAAA,UAAU,CAAC,MAAM;AACbT,QAAAA,QAAQ,CAAC;AACLE,UAAAA,OAAO,EAAE,KADJ;AAELC,UAAAA,KAAK,EAAE,IAFF;AAGLF,UAAAA;AAHK,SAAD,CAAR;AAOH,OARS,EAQP,IARO,CAAV;AAWH,KAbD;AAeH,GAnBQ,EAmBN,CAACJ,GAAD,CAnBM,CAAT;AAqBA,SAAOE,KAAP;AACH,CAlCM","sourcesContent":["import { useState, useEffect, useRef } from 'react'\n\nexport const useFetch = (url) => {\n\n\n    const isMounted = useRef(true);\n    const [state, setState] = useState({ data: null, loading: true, error: null })\n\n    useEffect(() => {\n        return () => {\n            isMounted.current = false;\n        }\n    }, [])\n\n    useEffect(() => {\n\n        setState({ data: null, loading: true, error: null });\n\n        fetch(url).then(resp => resp.json()).then(data => {\n\n            setTimeout(() => {\n                setState({\n                    loading: false,\n                    error: null,\n                    data\n                })\n\n\n            }, 4000);\n\n\n        })\n\n    }, [url])\n\n    return state;\n}"]},"metadata":{},"sourceType":"module"}