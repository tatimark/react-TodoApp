{"version":3,"sources":["components/08-useReducer/todoReducer.js","components/08-useReducer/TodoListItem.js","components/08-useReducer/TodoList.js","components/08-useReducer/TodoAdd.js","hooks/useForm.js","components/08-useReducer/TodoApp.js","components/09-useContext/UserContext.js","index.js"],"names":["todoReducer","state","action","type","payload","filter","todo","id","map","done","TodoListItem","index","handleDelete","handleToggle","key","className","onClick","desc","TodoList","todos","i","TodoAdd","handleAddTodo","initialState","useState","values","setValues","reset","handleInputChange","target","name","value","useForm","description","onSubmit","e","preventDefault","trim","length","newTodo","Date","getTime","placeholder","autoComplete","onChange","init","JSON","parse","localStorage","getItem","TodoApp","useReducer","dispatch","useEffect","setItem","stringify","todoId","console","log","createContext","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a510255a.chunk.js","sourcesContent":["export const todoReducer = (state = [], action) => {\n\n        switch (action.type) {\n            case 'add':\n\n                return [...state, action.payload];\n\n            case 'delete':\n                return state.filter(todo => todo.id !== action.payload); //payload 123535 action.payload.id regresa un nuevo arreglo\n\n\n            case 'toggle':\n                    return state.map( todo =>\n                        (todo.id === action.payload) //ternario\n                        ?{...todo, done: !todo.done }\n                        : todo\n                    );\n\n            case 'toggle-old':\n                return state.map(todo => {\n                    if (todo.id === action.payload) {\n                        return {\n                            ...todo,\n                            done: !todo.done\n                        }\n                    } else {\n                        return todo; // hay que regresar algo para que no haya undefind\n                    }\n\n                })\n\n            default:\n                return state;\n        }\n    }","import React from 'react'\n\n\n\nexport const TodoListItem = ({todo, index, handleDelete, handleToggle}) => {\n    return (\n       \n             <li\n                key = { todo.id }\n                className=\"list-group-item\"\n            >\n                <p className={ `${ todo.done && 'complete' }`}\n                onClick={ () => handleToggle(todo.id)}\n                >{ index + 1 }. { todo.desc }</p>\n                <button\n                className=\"btn btn-danger\"\n                onClick={ () => handleDelete(todo.id) }\n                >\n                    Borrar\n                </button>\n                </li>\n      \n    )\n}\n\n","import React from 'react';\nimport './styles.css';\nimport { TodoListItem } from './TodoListItem';\n\nexport const TodoList = ({todos, handleDelete, handleToggle}) => {\n    return (\n      \n            <ul className=\"list-group list-group-flush\">\n        {\n            todos.map( (todo, i ) => (\n                // TodoListItem, todo, index, handleDelate, handleToggle\n                <TodoListItem \n                 key={todo.id}\n                 todo={todo}\n                 index={i}\n                 handleDelete={handleDelete} \n                 handleToggle={handleToggle}\n                />\n            ))\n        }\n        </ul> \n       \n    )\n}\n\n\n","import React from 'react'\nimport { useForm } from '../../hooks/useForm';\nexport const TodoAdd = ({ handleAddTodo }) => {\n\n\n    const [ { description }, handleInputChange , reset ] = useForm({\n        description: ''\n    });\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n    \n        if( description.trim().length <= 1){\n            return;\n        }\n       const newTodo = {\n        id: new Date().getTime(),\n        desc: description,\n        done: false\n       };\n       handleAddTodo( newTodo )\n       reset();\n    \n    }\n\n    return (\n        <>\n        <h4>Agregar Todo</h4>\n        <hr />\n        <form onSubmit={ handleSubmit }>\n        <input \n            type=\"text\"\n            name=\"description\"\n            className=\"form-control\"\n            placeholder=\"Aprender ...\"\n            autoComplete=\"off\"\n            value={ description }\n            onChange={ handleInputChange }\n        />\n        \n        <button\n            type=\"submit\"\n            className=\"btn btn-outline-primary mt-1 btn-block\"\n        >\n            Agregar\n        </button>\n        </form>\n        </>\n    )\n}\n","import { useState } from 'react'\n\nexport const useForm = (initialState = {}) => {\n\n    const [values, setValues] = useState(initialState);\n\n    const reset = () => {\n        setValues(initialState);\n    }\n    const handleInputChange = ({ target }) => {\n\n        setValues({\n            ...values,\n            [target.name]: target.value\n        });\n    }\n\n    return [values, handleInputChange, reset];\n}","import React, { useReducer } from 'react';\nimport { useEffect } from 'react';\n\nimport './styles.css';\nimport { todoReducer } from './todoReducer';\nimport { TodoList } from './TodoList';\nimport { TodoAdd } from './TodoAdd';\n\n// const initialState = [{\n//     id: new Date().getTime(),\n//     desc: 'Aprender React',\n//     done: false\n// }]\n\nconst init= () =>{\n    // si hay todos traelos\n\n    return JSON.parse(localStorage.getItem('todos')) || []; // retorna todos si hay o sino un arreglo vacio\n\n    // return localStorage.getItem('todos');\n    // return [{\n    //     id: new Date().getTime(),\n    //     desc: 'Aprender React',\n    //     done: false\n    // }]\n}\n\nexport const TodoApp = () => {\n\nconst [ todos , dispatch ] = useReducer(todoReducer, [], init); // el InitialState es el init y [] es lo que va a ser inicialmente\n\n\n\n\n\nuseEffect( () =>{ \n    localStorage.setItem('todos', JSON.stringify( todos )); // solo guarda string el localstorage\n}, [todos] )\n\n\nconst handleDelete = (todoId) =>{\n    console.log(todoId);\n    // crear la action\n\n    // const newTodoDelete = { asÃ­ funciona\n    //     id: todoId,\n    //     desc: description,\n    //     done: false\n    //    };\n    //    const actionDelete = {\n    //        type: 'delete',\n    //        payload: newTodoDelete\n    //    }\n\n    const action = {\n           type: 'delete',\n            payload: todoId\n    }\n    \n\n    //dispatch\n    dispatch(action);\n//     dispatch(actionDelete);\n }\n\n\n const handleToggle = ( todoId ) =>{\n     dispatch({\n         type: 'toggle',\n         payload: todoId\n     })\n\n }\n\nconst handleAddTodo = ( newTodo ) =>{\n\n    dispatch({\n        type: 'add',\n        payload: newTodo\n    });\n}\n\n// console.log(description);\n\n// const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if( description.trim().length <= 1){\n//         return;\n//     }\n//    const newTodo = {\n//     id: new Date().getTime(),\n//     desc: description,\n//     done: false\n//    };\n  \n//    reset();\n\n// }\n\n    return (\n        <div>\n            <h1>TodoApp ( { todos.length } )</h1>\n            <hr />\n            <div className=\"row\">\n                <div className=\"col-7\">\n              \n        {/* TodoList,  necesita los todos argumento enviado mediante prop, handleDelete, handleToggle */}\n                    <TodoList \n                    todos={ todos}\n                    handleDelete={ handleDelete} \n                    handleToggle={ handleToggle}\n                    />\n                        {/* <ul className=\"list-group list-group-flush\">\n                            {\n                                todos.map( (todo, i ) => (\n                                    // TodoListItem, todo, index, handleDelate, handleToggle\n                                <li\n                                    key = { todo.id }\n                                    className=\"list-group-item\"\n                                >\n                                    <p className={ `${ todo.done && 'complete' }`}\n                                    onClick={ () => handleToggle(todo.id)}\n                                    >{ i + 1 }. { todo.desc }</p>\n                                    <button\n                                    className=\"btn btn-danger\"\n                                    onClick={ () => handleDelete(todo.id) }\n                                    >\n                                        Borrar\n                                    </button>\n                                    </li>\n                                ))\n                            }\n                            </ul>  */}\n                </div>\n                <div className=\"col-5\">\n                    <TodoAdd \n                        handleAddTodo={ handleAddTodo }\n                    />\n                    {/* <h4>Agregar Todo</h4>\n                    <hr />\n                    <form onSubmit={ handleSubmit }>\n                    <input \n                        type=\"text\"\n                        name=\"description\"\n                        className=\"form-control\"\n                        placeholder=\"Aprender ...\"\n                        autoComplete=\"off\"\n                        value={ description }\n                        onChange={ handleInputChange }\n                    />\n                    \n                    <button\n                        type=\"submit\"\n                        className=\"btn btn-outline-primary mt-1 btn-block\"\n                    >\n                        Agregar\n                    </button>\n                    </form> */}\n                </div>\n            </div>\n     \n        </div>\n    )\n}\n","import { createContext } from 'react';\n\nexport const UserContext = createContext(null);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { TodoApp } from './components/08-useReducer/TodoApp';\n// import { HookApp } from './HookApp'\n// import { CounterApp } from './components/01-useState/CounterApp'\n// import { CounterWithCustomHook } from './components/01-useState/CounterWithCustomHook'\n// import { SimpleForm } from './components/02-useEffect/SimpleForm'\n// import { FormWithCustomHook } from './components/02-useEffect/FormWithCustomHook'\n// import '../02-useEffect/effects.css';\n// import { MultipleCustomHooks } from './components/03-examples/MultipleCustomHooks'\n// import { FocusScreen } from './components/04-useRef/FocusScreen'\n// import { RealExampleRef } from './components/04-useRef/RealExampleRef'\n\n// import { Layout } from './components/05-LayoutEffect/Layout'\n\n// import { MemoHook } from './components/06-memos/MemoHook'\n// import { CallBackHook } from './components/06-memos/CallBackHook'\n// import { Padre } from './components/07-tarea-memo/Padre'\n// import { TodoApp } from './components/08-useReducer/TodoApp';\nimport { MainApp } from './components/09-useContext/MainApp';\n\n\n\n\nReactDOM.render( \n    <TodoApp /> ,\n    document.getElementById('root')\n);"],"sourceRoot":""}